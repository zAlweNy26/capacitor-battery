{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAN,IAAY,iBAMX;AAND,WAAY,iBAAiB;IAC3B,+DAAO,CAAA;IACP,qDAAE,CAAA;IACF,uDAAG,CAAA;IACH,yDAAI,CAAA;IACJ,iEAAQ,CAAA;AACV,CAAC,EANW,iBAAiB,KAAjB,iBAAiB,QAM5B;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,aAQX;AARD,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,iDAAI,CAAA;IACJ,iDAAI,CAAA;IACJ,iDAAI,CAAA;IACJ,yDAAQ,CAAA;IACR,iEAAY,CAAA;IACZ,uDAAO,CAAA;AACT,CAAC,EARW,aAAa,KAAb,aAAa,QAQxB;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,aAMX;AAND,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,iEAAY,CAAA;IACZ,+DAAW,CAAA;IACX,yDAAQ,CAAA;IACR,iDAAI,CAAA;AACN,CAAC,EANW,aAAa,KAAb,aAAa,QAMxB","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\n/**\n * Enum representing the different modes of charging for a battery.\n */\nexport enum BatteryChargeMode {\n  UNKNOWN,\n  AC,\n  USB,\n  DOCK,\n  WIRELESS,\n}\n\n/**\n * Enum representing the health status of a device's battery.\n */\nexport enum BatteryHealth {\n  UNKNOWN,\n  COLD,\n  DEAD,\n  GOOD,\n  OVERHEAT,\n  OVER_VOLTAGE,\n  FAILURE,\n}\n\n/**\n * Enum representing the possible battery statuses.\n */\nexport enum BatteryStatus {\n  UNKNOWN,\n  NOT_CHARGING,\n  DISCHARGING,\n  CHARGING,\n  FULL,\n}\n\n/**\n * Represents the battery information of the device.\n */\nexport interface Battery {\n  /** The current battery level as a percentage (0-100). */\n  level: number;\n  /** Whether the device has a battery or not. */\n  hasBattery: boolean;\n  /** Whether the device is currently charging or not. */\n  isCharging: boolean;\n  /** The estimated time remaining until the battery is fully charged (in minutes). Only available when charging. */\n  chargingTime?: number;\n  /** The estimated time remaining until the battery is fully discharged (in minutes). Only available when discharging. */\n  dischargingTime?: number;\n  /** The current battery capacity (in mAh). Only available on some devices. */\n  currentCapacity?: number;\n  /** The total battery capacity (in mAh). Only available on some devices. */\n  totalCapacity?: number;\n  /** The real battery percentage, which may differ from the reported percentage. Only available on some devices. */\n  realPercentage?: number;\n  /** The technology used in the battery. Only available on some devices. */\n  technology?: string;\n  /** The current temperature of the battery (in Celsius). Only available on some devices. */\n  temperature?: number;\n  /** The current voltage of the battery (in volts). Only available on some devices. */\n  voltage?: number;\n  /** The current amperage of the battery (in amperes). Only available on some devices. */\n  amperage?: number;\n  /** The current wattage of the battery (in watts). Only available on some devices. */\n  wattage?: number;\n  /** The health status of the battery. Only available on some devices. */\n  health?: BatteryHealth;\n  /** The status of the battery. Only available on some devices. */\n  status?: BatteryStatus;\n  /** The charging mode of the battery. Only available on some devices. */\n  chargeMode?: BatteryChargeMode;\n}\n\n/**\n * The Battery plugin interface.\n */\nexport interface BatteryPlugin {\n  /**\n   * Starts monitoring the battery level.\n   * @returns A promise that resolves with the current battery level, or undefined if the level cannot be determined.\n   */\n  start(): Promise<Battery | undefined>;\n\n  /**\n   * Stops monitoring the battery level.\n   * @returns A promise that resolves when monitoring has stopped.\n   */\n  stop(): Promise<void>;\n\n  /**\n   * Adds a listener for battery change events.\n   * @param eventName The name of the event to listen for.\n   * @param listenerFunc The function to call when the event is triggered.\n   * @returns A promise that resolves with a handle to the listener.\n   */\n  addListener(eventName: 'batteryChange', listenerFunc: (event: Battery) => void): Promise<PluginListenerHandle>;\n\n  /**\n   * Removes all listeners for battery change events.\n   * @returns A promise that resolves when all listeners have been removed.\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}