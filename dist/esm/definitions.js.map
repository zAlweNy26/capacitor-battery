{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA,iDAAiD;AACjD,MAAM,CAAN,IAAY,iBAWX;AAXD,WAAY,iBAAiB;IAC3B,oCAAoC;IACpC,+DAAO,CAAA;IACP,+DAA+D;IAC/D,qDAAE,CAAA;IACF,6DAA6D;IAC7D,uDAAG,CAAA;IACH,8DAA8D;IAC9D,yDAAI,CAAA;IACJ,+CAA+C;IAC/C,iEAAQ,CAAA;AACV,CAAC,EAXW,iBAAiB,KAAjB,iBAAiB,QAW5B;AACD;;GAEG;AACH,MAAM,CAAN,IAAY,aAeX;AAfD,WAAY,aAAa;IACvB,oCAAoC;IACpC,uDAAO,CAAA;IACP,2BAA2B;IAC3B,iDAAI,CAAA;IACJ,2BAA2B;IAC3B,iDAAI,CAAA;IACJ,qCAAqC;IACrC,iDAAI,CAAA;IACJ,kCAAkC;IAClC,yDAAQ,CAAA;IACR,gDAAgD;IAChD,iEAAY,CAAA;IACZ,8BAA8B;IAC9B,uDAAO,CAAA;AACT,CAAC,EAfW,aAAa,KAAb,aAAa,QAexB;AACD;;GAEG;AACH,MAAM,CAAN,IAAY,aAWX;AAXD,WAAY,aAAa;IACvB,qCAAqC;IACrC,uDAAO,CAAA;IACP,mCAAmC;IACnC,iEAAY,CAAA;IACZ,kCAAkC;IAClC,+DAAW,CAAA;IACX,+BAA+B;IAC/B,yDAAQ,CAAA;IACR,2BAA2B;IAC3B,iDAAI,CAAA;AACN,CAAC,EAXW,aAAa,KAAb,aAAa,QAWxB","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\n/** Represents the charging mode of a battery. */\nexport enum BatteryChargeMode {\n  /** The charging mode is unknown. */\n  UNKNOWN,\n  /** The battery is being charged through an AC power source. */\n  AC,\n  /** The battery is being charged through a USB connection. */\n  USB,\n  /** The battery is being charged through a docking station. */\n  DOCK,\n  /** The battery is being charged wirelessly. */\n  WIRELESS,\n}\n/**\n * Represents the health status of a battery.\n */\nexport enum BatteryHealth {\n  /** The health status is unknown. */\n  UNKNOWN,\n  /** The battery is cold. */\n  COLD,\n  /** The battery is dead. */\n  DEAD,\n  /** The battery is in good health. */\n  GOOD,\n  /** The battery is overheating. */\n  OVERHEAT,\n  /** The battery is experiencing over voltage. */\n  OVER_VOLTAGE,\n  /** The battery has failed. */\n  FAILURE,\n}\n/**\n * Represents the battery status.\n */\nexport enum BatteryStatus {\n  /** The battery status is unknown. */\n  UNKNOWN,\n  /** The battery is not charging. */\n  NOT_CHARGING,\n  /** The battery is discharging. */\n  DISCHARGING,\n  /** The battery is charging. */\n  CHARGING,\n  /** The battery is full. */\n  FULL,\n}\n\n/** Represents the battery information of the device. */\nexport interface BatteryInfos {\n  /** The current battery level as a percentage (0-100). */\n  level: number;\n  /** Whether the device has a battery or not. */\n  hasBattery: boolean;\n  /** Whether the device is currently charging or not. */\n  isCharging: boolean;\n  /** The estimated time remaining until the battery is fully charged (in minutes). Only available when charging. */\n  chargingTime?: number;\n  /** The estimated time remaining until the battery is fully discharged (in minutes). Only available when discharging. */\n  dischargingTime?: number;\n  /** The current battery capacity (in mAh). Only available on some devices. */\n  currentCapacity?: number;\n  /** The total battery capacity (in mAh). Only available on some devices. */\n  totalCapacity?: number;\n  /** The real battery percentage, which may differ from the reported percentage. Only available on some devices. */\n  realPercentage?: number;\n  /** The technology used in the battery. Only available on some devices. */\n  technology?: string;\n  /** The current temperature of the battery (in Celsius). Only available on some devices. */\n  temperature?: number;\n  /** The current voltage of the battery (in volts). Only available on some devices. */\n  voltage?: number;\n  /** The current amperage of the battery (in amperes). Only available on some devices. */\n  amperage?: number;\n  /** The current wattage of the battery (in watts). Only available on some devices. */\n  wattage?: number;\n  /** The health status of the battery. Only available on some devices. */\n  health?: BatteryHealth;\n  /** The status of the battery. Only available on some devices. */\n  status?: BatteryStatus;\n  /** The charging mode of the battery. Only available on some devices. */\n  chargeMode?: BatteryChargeMode;\n}\n\n/** Represents the BatteryPlugin interface. */\nexport interface BatteryPlugin {\n  /**\n   * Starts the battery plugin and returns the battery information.\n   * @returns A promise that resolves to the battery information or undefined.\n   */\n  start(): Promise<BatteryInfos | undefined>;\n  /**\n   * Stops the battery plugin.\n   * @returns A promise that resolves when the plugin is stopped.\n   */\n  stop(): Promise<void>;\n  /**\n   * Adds a listener for the 'batteryChange' event.\n   * @param eventName The name of the event.\n   * @param listenerFunc The listener function to be called when the event is triggered.\n   * @returns A promise that resolves to a PluginListenerHandle.\n   */\n  addListener(eventName: 'batteryChange', listenerFunc: (event: BatteryInfos) => void): Promise<PluginListenerHandle>;\n  /**\n   * Removes all listeners for the 'batteryChange' event.\n   * @returns A promise that resolves when all listeners are removed.\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}