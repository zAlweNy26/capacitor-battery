{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,UAAW,SAAQ,SAAS;IAAzC;;QAEU,eAAU,GAAG,IAAI,eAAe,EAAE,CAAA;IAgD5C,CAAC;IA9CC,KAAK,CAAC,KAAK;QACT,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,CAAC,CAAC,YAAY,IAAI,SAAS,CAAC,EAAE;YACpE,IAAI,CAAC,WAAW,CAAC,sDAAsD,CAAC,CAAC;SAC1E;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAA;YAE3C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,WAAW,CAAC,mDAAmD,CAAC,CAAC;aACvE;YAED,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,EAC9C,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;YAErE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,EAChD,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;YAErE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,uBAAuB,EACvD,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;YAErE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,aAAa,EACzC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;YAEvE,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAA;SAClC;IACH,CAAC;IAEO,mBAAmB;QACzB,MAAM,MAAM,GAAG;YACb,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YACjC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY;YACvC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;YAC7C,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;SACR,CAAA;QACnB,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;QAC7C,OAAO,MAAM,CAAA;IACf,CAAC;IAED,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC,kBAAkB,EAAE,CAAC;IACpC,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { BatteryPlugin, Battery } from './definitions';\n\nexport class BatteryWeb extends WebPlugin implements BatteryPlugin {\n  private battery!: BatteryManager;\n  private controller = new AbortController()\n\n  async start(): Promise<Battery | undefined> {\n    if (typeof navigator === 'undefined' || !(\"getBattery\" in navigator)) {\n      this.unavailable('Battery Status API is not available in this browser.');\n    } else {\n      this.battery = await navigator.getBattery()\n\n      if (!this.battery) {\n        this.unavailable('Unable to get the battery status in this browser.');\n      }\n\n      this.battery.addEventListener('chargingchange', \n      () => this.notifyBatteryChange(), { signal: this.controller.signal })\n\n      this.battery.addEventListener('chargingtimechange', \n        () => this.notifyBatteryChange(), { signal: this.controller.signal })\n        \n        this.battery.addEventListener('dischargingtimechange', \n      () => this.notifyBatteryChange(), { signal: this.controller.signal })\n\n      this.battery.addEventListener('levelchange', \n        () => this.notifyBatteryChange(), { signal: this.controller.signal })\n\n      return this.notifyBatteryChange()\n    }\n  }\n\n  private notifyBatteryChange() {\n    const result = {\n      hasBattery: true,\n      isCharging: this.battery.charging,\n      chargingTime: this.battery.chargingTime,\n      dischargingTime: this.battery.dischargingTime,\n      level: this.battery.level\n    } satisfies Battery\n    this.notifyListeners('batteryChange', result)\n    return result\n  }\n\n  async stop(): Promise<void> {\n    this.controller.abort();\n  }\n\n  async removeAllListeners(): Promise<void> {\n    this.controller.abort();\n    return super.removeAllListeners();\n  }\n}\n"]}